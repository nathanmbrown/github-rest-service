package server.api;

import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.github.phiz71.vertx.swagger.router.OperationIdServiceIdResolver;
import com.github.phiz71.vertx.swagger.router.SwaggerRouter;
import io.swagger.models.Swagger;
import io.swagger.parser.SwaggerParser;
import io.vertx.core.*;
import io.vertx.core.file.FileSystem;
import io.vertx.core.json.Json;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;
import io.vertx.ext.web.Router;

import java.nio.charset.Charset;

/**
 * The Main Verticle, generated by Swagger.
 */
public class MainApiVerticle extends AbstractVerticle
{
  final static Logger LOGGER = LoggerFactory.getLogger(MainApiVerticle.class);

  protected Router router;

  @Override
  public void init(Vertx vertx, Context context)
  {
    super.init(vertx, context);
    router = Router.router(vertx);
  }

  @Override
  public void start(Future<Void> startFuture) throws Exception
  {
    Json.mapper.registerModule(new JavaTimeModule());
    FileSystem vertxFileSystem = vertx.fileSystem();
    vertxFileSystem.readFile("swagger.json", readFile -> {
      if (readFile.succeeded()) {
        Swagger swagger = new SwaggerParser().parse(readFile.result().toString(Charset.forName("utf-8")));
        Router swaggerRouter = SwaggerRouter.swaggerRouter(router,
                                                           swagger,
                                                           vertx.eventBus(),
                                                           new OperationIdServiceIdResolver());

        deployVerticles(startFuture);

        vertx.createHttpServer()
             .requestHandler(swaggerRouter::accept)
             .listen(8080);
        LOGGER.info("HTTP server installed on localhost:8080");
        startFuture.complete();
      } else {
        startFuture.fail(readFile.cause());
      }
    });
  }

  public void deployVerticles(Future<Void> startFuture)
  {

    vertx.deployVerticle("server.api.verticle.ProjectsApiVerticle", res -> {
      if (res.succeeded()) {
        LOGGER.info("ProjectsApiVerticle : Deployed");
      } else {
        startFuture.fail(res.cause());
        LOGGER.error("ProjectsApiVerticle : Deployment failed");
      }
    });

  }
}